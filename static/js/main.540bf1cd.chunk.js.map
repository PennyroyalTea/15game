{"version":3,"sources":["Tile.tsx","Field.tsx","Page.tsx","App.tsx","index.tsx"],"names":["Tile","props","cls","value","className","onClick","clickHandler","Field","tiles","field","map","x","handleTileClick","Title","Typography","getxy","ind","Page","useState","List","setField","clicksCnt","setClicksCnt","handleRestart","sortBy","Math","random","every","val","id","message","success","span","level","a","b","curTileCoord","indexOf","emptyTileCoord","abs","y","list","pos1","pos2","tmp","get","set","swap","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAkBeA,EAVF,SAACC,GACV,IAAIC,EAAM,OAEV,OADoB,IAAhBD,EAAME,QAAaD,GAAO,UAE1B,qBAAKE,UAAWF,EAAKG,QAASJ,EAAMK,aAApC,SACI,sBAAMF,UAAU,UAAhB,SAA2BH,EAAME,WCI9BI,EAPD,SAACN,GACX,IAAMO,EAAQP,EAAMQ,MAAMC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMR,MAAOQ,EAAGL,aAAc,kBAAML,EAAMW,gBAAgBD,KAASA,MACtG,OAAQ,qBAAKP,UAAU,QAAf,SACHI,KCHFK,EAASC,IAATD,MAODE,EAAQ,SAACC,GACX,IAAML,EAAIK,EAAM,EAEhB,MAAO,CAAC,EAAKL,EAAG,GADLK,EAAML,GAAK,IA8DXM,EA3CF,WAAO,IAAD,EACWC,mBAASC,YAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,MAD5E,mBACRV,EADQ,KACDW,EADC,OAEmBF,mBAAS,GAF5B,mBAERG,EAFQ,KAEGC,EAFH,KAcTC,EAAgB,WAClBH,EAASX,EAAMe,OAAOC,KAAKC,SAC3BJ,EAAa,IAQjB,OALUb,EArBEkB,OAAM,SAACC,EAAKC,GAAN,OAAaD,KAASC,EAAK,GAAK,QAsB9CC,IAAQC,QAAR,iGAAoCV,EAApC,2CACAE,KAGI,qCACJ,eAAC,IAAD,WACI,cAAC,IAAD,CAAKS,KAAM,EAAX,SACI,eAACnB,EAAD,CAAOoB,MAAO,EAAd,8FAAkCZ,EAAlC,SAEJ,cAAC,IAAD,CAAKW,KAAM,EAAX,SACI,cAAC,IAAD,CAAQ3B,QAASkB,EAAjB,kGAGR,cAAC,IAAD,UACI,cAAC,IAAD,CAAKS,KAAM,GAAX,SACI,cAAC,EAAD,CACIvB,MAASA,EACTG,gBAjCQ,SAACgB,GACrB,GAAY,IAARA,EAAJ,CACA,IArBUM,EAAUC,EAqBdC,EAAerB,EAAMN,EAAM4B,QAAQT,IACnCU,EAAiBvB,EAAMN,EAAM4B,QAAQ,IAtBvBF,EAuBOG,IAvBjBJ,EAuBGE,GArBVzB,IAAMwB,EAAExB,GAA6B,IAAxBc,KAAKc,IAAIL,EAAEM,EAAIL,EAAEK,IAC7BN,EAAEM,IAAML,EAAEK,GAA6B,IAAxBf,KAAKc,IAAIL,EAAEvB,EAAIwB,EAAExB,MAqBhCS,EAjBC,SAACqB,EAAqBC,EAAeC,GAC9C,IAAMC,EAAMH,EAAKI,IAAIH,GACrB,OAAOD,EAAKK,IAAIJ,EAAMD,EAAKI,IAAIF,IAAiBG,IAAIH,EAAMC,GAezCG,CAAKtC,EAAOA,EAAM4B,QAAQT,GAAMnB,EAAM4B,QAAQ,KACvDf,EAAaD,EAAY,gBCtCtB2B,EAJH,WACV,OAAQ,cAAC,EAAD,KCHVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.540bf1cd.chunk.js","sourcesContent":["import React from 'react';\nimport './Field.css';\n\ninterface Props {\n    value: number | null,\n    clickHandler(): void\n}\n\nconst Tile = (props : Props) => {\n    let cls = 'tile';\n    if (props.value === 0) cls += ' empty';\n    return (\n        <div className={cls} onClick={props.clickHandler}>\n            <span className='content'>{props.value}</span>\n        </div>\n    )\n}\n\nexport default Tile;","import React from 'react';\nimport {List} from 'immutable';\n\nimport Tile from './Tile';\n\ninterface Props {\n    field: List<number>,\n    handleTileClick(val: number): void\n}\n\nconst Field = (props : Props) => {\n    const tiles = props.field.map(x => <Tile value={x} clickHandler={() => props.handleTileClick(x)} key={x}/>)\n    return (<div className='field'>\n        {tiles}\n    </div>);\n}\n\nexport default Field;","import React from 'react';\n\nimport 'antd/dist/antd.css';\nimport { Row, Col, Typography, Button, message } from 'antd';\n\n\nimport {List} from 'immutable';\nimport Field from './Field';\nimport {useState} from \"react\";\n\nconst {Title} = Typography;\n\ninterface Coord {\n    x: number,\n    y: number\n}\n\nconst getxy = (ind : number) : Coord => {\n    const x = ind % 4;\n    const y = (ind - x) / 4;\n    return {'x': x, 'y': y};\n}\n\nconst adjacent = (a: Coord, b: Coord) : boolean => {\n    return (\n        (a.x === b.x && Math.abs(a.y - b.y) === 1)\n        || (a.y === b.y && Math.abs(a.x - b.x) === 1)\n    );\n}\n\nconst swap = (list : List<number>, pos1 : number, pos2: number) : List<number> => {\n    const tmp = list.get(pos1);\n    return list.set(pos1, list.get(pos2) as number).set(pos2, tmp as number);\n}\n\nconst isWin = (list: List<number>) : boolean => {\n    return list.every((val, id) => val === (id + 1) % 16);\n}\nconst Page = () => {\n    const [field, setField] = useState(List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15]));\n    const [clicksCnt, setClicksCnt] = useState(0);\n\n    const handleTileClick = (val: number) => {\n        if (val === 0) return;\n        const curTileCoord = getxy(field.indexOf(val));\n        const emptyTileCoord = getxy(field.indexOf(0));\n        if (adjacent(curTileCoord, emptyTileCoord)) {\n            setField(swap(field, field.indexOf(val), field.indexOf(0)));\n            setClicksCnt(clicksCnt + 1);\n        }\n    }\n\n    const handleRestart = () => {\n        setField(field.sortBy(Math.random));\n        setClicksCnt(0);\n    }\n\n    if (isWin(field)) {\n        message.success(`Вы справились за ${clicksCnt} кликов!`);\n        handleRestart();\n    }\n\n    return (<>\n        <Row>\n            <Col span={4}>\n                <Title level={4}>Кликов сделано: {clicksCnt} </Title>\n            </Col>\n            <Col span={4}>\n                <Button onClick={handleRestart}>Начать сначала</Button>\n            </Col>\n        </Row>\n        <Row>\n            <Col span={24}>\n                <Field\n                    field = {field}\n                    handleTileClick = {handleTileClick}\n                />\n            </Col>\n        </Row>\n    </>)\n}\nexport default Page;","import React from 'react';\n\nimport Page from './Page';\n\n\n\nconst App = () => {\n  return (<Page/>);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}